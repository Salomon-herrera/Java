[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\srher\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\srher\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.2 (Oracle Corporation Java 18.0.2.1)
[debug]       Load.loadUnit: plugins took 175.3061ms
[debug]       Load.loadUnit: defsScala took 0.1855ms
[debug] [Loading] Scanning directory C:\Users\srher\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\srher\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.6471 ms
[debug]           Load.resolveProject(global-plugins) took 53.0762ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\srher\.sbt\1.0\plugins, plugins: List(<none>))) took 87.3834ms
[debug] [Loading] Done in C:\Users\srher\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 110.7642ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6928ms
[debug]     Load.loadUnit(file:/C:/Users/srher/.sbt/1.0/plugins/, ...) took 300.6051ms
[debug]   Load.apply: load took 594.4023ms
[debug]   Load.apply: resolveProjects took 7.1524ms
[debug]   Load.apply: finalTransforms took 101.8681ms
[debug]   Load.apply: config.delegates took 23.5109ms
[debug]   Load.apply: Def.make(settings)... took 716.8348ms
[debug]   Load.apply: structureIndex took 141.6868ms
[debug]   Load.apply: mkStreams took 7.2099ms
[info] loading global plugins from C:\Users\srher\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6404.6825ms
[debug]           Load.loadUnit: plugins took 21.7393ms
[debug]           Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory C:\Users\srher\Documents\Java_Development\untitled\project
[debug]             Load.loadUnit: mkEval took 6.3888ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\srher\Documents\Java_Development\untitled\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6967 ms
[info] loading settings for project untitled-build from idea.sbt ...
[debug]               Load.resolveProject(untitled-build) took 3.5709ms
[debug]             Load.loadTransitive: finalizeProject(Project(id untitled-build, base: C:\Users\srher\Documents\Java_Development\untitled\project, plugins: List(<none>))) took 5.9188ms
[debug] [Loading] Done in C:\Users\srher\Documents\Java_Development\untitled\project, returning: (untitled-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2969.2796ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.8682ms
[debug]         Load.loadUnit(file:/C:/Users/srher/Documents/Java_Development/untitled/project/, ...) took 2998.7949ms
[debug]       Load.apply: load took 3000.5414ms
[debug]       Load.apply: resolveProjects took 0.1015ms
[debug]       Load.apply: finalTransforms took 12.3047ms
[debug]       Load.apply: config.delegates took 0.6177ms
[debug]       Load.apply: Def.make(settings)... took 91.9997ms
[debug]       Load.apply: structureIndex took 30.5637ms
[debug]       Load.apply: mkStreams took 0.0039ms
[info] loading project definition from C:\Users\srher\Documents\Java_Development\untitled\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 5764.2229ms
[debug]     Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\srher\Documents\Java_Development\untitled
[debug]       Load.loadUnit: mkEval took 0.6265ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.0578 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 44.0639ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\srher\Documents\Java_Development\untitled, plugins: List(<none>))) took 49.3316ms
[debug] [Loading] Done in C:\Users\srher\Documents\Java_Development\untitled, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1339.2592ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.0041ms
[debug]   Load.loadUnit(file:/C:/Users/srher/Documents/Java_Development/untitled/, ...) took 7126.3718ms
[debug] Load.apply: load took 7128.3125ms
[debug] Load.apply: resolveProjects took 0.2284ms
[debug] Load.apply: finalTransforms took 37.8314ms
[debug] Load.apply: config.delegates took 0.4084ms
[debug] Load.apply: Def.make(settings)... took 96.0435ms
[debug] Load.apply: structureIndex took 33.5098ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to untitled (in build file:/C:/Users/srher/Documents/Java_Development/untitled/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50810 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50810, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to untitled (in build file:/C:/Users/srher/Documents/Java_Development/untitled/)
[debug] > Exec(idea-shell, None, None)
